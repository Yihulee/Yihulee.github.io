#+TITLE:       一个多月的小结
#+AUTHOR:      Yihulee
#+EMAIL:       Yihulee@gmail.com
#+DATE:        2016-04-21 周四
#+URI:         /blog/%y/%m/%d/一个多月的小结
#+KEYWORDS:    scheme, eopl
#+TAGS:        随笔
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 时光真是一把利器！
时光真是一把利器，滴水穿石，这句话真是威力无穷。

回想在一个多月之前，我抱着厚厚的一本 *<Essentials of Programming Languages>* ，不由得发出感叹，什么时候搞得完啊，当然，我这么说是有依据的啦，因为这本书上习题非常多，只有通过习题，你才能够真正理解书上的内容，所以当时进度简直就是龟速。一天弄不了几页。

不过还是坚持下来了，每天啃一点，每天敲一点，到了今天，终于将这本书老老实实地过了一遍，回想起此间的一个多月里，我很多次都忍不住翻了翻后面没看的内容，每天都感慨，怎么还有这么多捏。越到后面越喜欢翻。好吧，今天算是翻完了，我又喜欢翻那些读过的泛黄的书页，成就感爆棚啊。

*eopl* 是我到目前为止最喜欢的编程书，这句话可不是白说的，要不是这本书太好，我才懒得一章一章认认真真的搞呢。

*scheme* 大概就到这里啦，仔细想了想，我大概花了有半年的时间在 *scheme* 上,不，更切确的说，是在编程本身，而不是在那些细枝末节之上。 *scheme* 教会了我很多的东西，我觉得最有价值的是 *递归* 地看待问题，没有接触 *scheme* 之前，我没有真正理解到 *递归* 的本质，以及这玩意丧心病狂般的重要性。其次，是 *eopl* 以及 *sicp* 这两本书带给我的，编程的本质的东西。学会如何去抽象，如何封装，如何去写一个解释器。可以毫不夸张的说 *eopl* 这本书改变了我对编程语言的认识，刷新了我的三观。将来面对错综复杂的编程语言的时候，可以很容易地看到它本质的那些东西，不再被语法糖蒙蔽了双眼。 *sicp* 确实很像软件工程的教科书，因为这里面有非常多的如何构建大规模程序的指导意见，好吧，这两本书的确是经典中的经典，都值得多刷几遍。

好吧，这玩意算是告一段落了，我有必要想一想接下来要干啥啦。

* TODO 我有一些想法，这里贴一贴。[0/6]
      + [ ] parsing technology
      + [ ] 用python完成一个scheme的解释器
      + [ ] 实现一个正则表达式的引擎，可以进行词法分析
      + [ ] The seasoned schemer
      + [ ] 编程语言实践之路
      + [ ] Linux 多线程服务器编程 使用muduo C++网络库

* TODO 基本上我想做的就在上面，此外云计算的老师布置了下面的一些东西：[0/4]
** TODO 编程语言: [2/3]
      + [X] Java
      + [ ] Scala
      + [X] Python
** TODO 虚拟化和私有云: [0/2]
      + [ ] openstack
      + [ ] cloudstack
** TODO 文件系统： [0/4]
      + [ ] DFS
      + [ ] HPFS
      + [ ] GFS
      + [ ] CEPH
** TODO 数据处理技术: [0/2]
      + [ ] Hadoop
      + [ ] Spark

