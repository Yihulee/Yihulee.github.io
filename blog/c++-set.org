#+TITLE:       C++中关于set的自定义排序函数的书写
#+AUTHOR:      Yihulee
#+EMAIL:       Yihulee@gmail.com
#+DATE:        2016-05-13 周五
#+URI:         /blog/%y/%m/%d/c++中关于set的自定义排序函数的书写
#+KEYWORDS:    C++，Set
#+TAGS:        C++
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 记录

大概有两个月没用过C++啦，手都变得很生了，在这里，在这里我想扯一下关于set的比较函数的定义，我想，应该有不少人对这个东西感到头疼吧！

如果说我想在set里面添加一个自定义的类型，比如说下面的结构体：

#+BEGIN_SRC C++
struct Symbol
{
    char name[10];
};
#+END_SRC

我们如果要用set来盛放Symbol，我们应该怎么办么？

#+BEGIN_SRC C++
set<Symbol> gSym;
#+END_SRC

如果像上面这么来写的话，或许你的编译能够通过，但是应该插入两个元素之后就会报错：

#+BEGIN_SRC C++
Symbol s1 = {"hi"};
Symbol s2 = {"girls"};
gSym.insert(s1);
gSym.insert(s2);
#+END_SRC

你这么干是不行的，C++编译器操蛋的地方在于，它默默地为你干了一些事情，我这里稍微来剖析一下这段代码里，编译器到底为你干了些什么。

其实set的原型如下：

#+BEGIN_SRC C++
template <class Key,
          class Compare = less <key>,
          class Alloc = alloc>
class set {
...
};
#+END_SRC

模版里面默认的比较函数是less,less函数的定义如下：

#+BEGIN_SRC C++
template <class T>
struct less : public binary_function<T, T, bool> {
   bool operator () (const T& x, const T& y)const { return x < y; }
};
#+END_SRC

less函数其实是一个仿函数，你在上面定义 *set<Symbol> gSym* 的时候，其实编译器默认给你的比较函数是 *less<Symbol>* ,gSym要插入元素的时候，元素要和set里面的元素进行比较，然而 *x < y* ，C++并不知道如何比较，x和y是Symbol类型，所以就报错了。

如何解决呢？给Symbol类型定义一个比较函数即可：
#+BEGIN_SRC C++
struct Symbol
{
	char name[10];
	
	bool operator< (const Symbol& r) const
	{
		if (strcmp(name, r.name) < 0)
			return true;
		else
			return false;
	}

};
#+END_SRC

好了，修改代码如上面即可。现在你运行代码，应该没问题了。

好吧，现在你想让set中的元素从大到小排序，怎么办？

#+BEGIN_SRC C++
set<Symbol, greater<Symbol>> gSym;
#+END_SRC

然后我们给Symbol定义一个 *>* 即可。

当然，你也可以不用greater， less等仿函数，你可以自己定义仿函数，怎么定义呢？仿照上面的less函数即可，去掉泛型。
#+BEGIN_SRC C++
#include <iostream>
#include <set>
#include <functional>
using namespace std;

struct Symbol
{
	char name[10];
};

struct SymCmp
{
	bool operator () (const Symbol& x, const Symbol& y) const
	{
		if (strcmp(x.name, y.name) < 0)
			return true;
		else
			return false;
	}
};


set<Symbol, SymCmp> gSet;

int main()
{
	Symbol s1 = { "hi" };
	Symbol s2 = { "girls" };

	gSet.insert(s1);
	gSet.insert(s2);
	gSet.insert(s1);
	gSet.insert(s2);
	gSet.insert(s1);

	system("pause");
	return 0;
}
#+END_SRC
好了，我想，我说清楚了，大家详细了解的话，请查看<STL源码剖析>。
