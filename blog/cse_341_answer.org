#+TITLE:       Programming language 解题报告
#+AUTHOR:      Yihulee
#+EMAIL:       Yihulee@gmail.com
#+DATE:        2016-02-24 周三
#+URI:         /blog/%y/%m/%d/programming-language-解题报告
#+KEYWORDS:    Programming Language
#+TAGS:        wiki
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:t toc:t \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 解题报告

* homework1
** is_older
#+BEGIN_SRC sml
fun is_older (date1 : (int * int * int), date2 : (int * int * int)) =
  (*这个函数的要求是判断date1是否比date2更早，其实非常好判断，直接按照年月日判断即可*)
  if (#1 date1) <> (#1 date2) (* 年的值不同 *)
  then (#1 date1) < (#1 date2)
  else if (#2 date1) <> (#2 date2) (* 月的值不同 *)
  then (#2 date1) < (#2 date2)
  else if (#3 date1) <> (#3 date2) (* 天数不同 *)
  then (#3 date1) < (#3 date2)
  else false (* 到这里表示两个日期相同,返回false *)
#+END_SRC
** number_in_month
#+BEGIN_SRC sml
fun number_in_month (dl : (int * int * int) list, month : int) =
  (* 参数是一个 list of dates 和一个 month,要返回的结果是在指定的这个月里，这个dates中月份等于该month的一共有多少个 *)
  if null dl
  then 0
  else if (#2 (hd dl)) = month
  then 1 + number_in_month(tl dl, month)
  else number_in_month(tl dl, month)
#+END_SRC

** number_in_months
#+BEGIN_SRC sml
fun number_in_months(dl : (int * int * int) list, ml : int list) =
  if null ml
  then []
  else number_in_month(dl, hd ml)::number_in_months(dl, tl ml)
#+END_SRC

** dates_in_month
#+BEGIN_SRC sml
fun dates_in_month(dl : (int * int * int) list, m : int) =
  if null dl
  then []
  else if (#2 (hd dl)) = m
  then (hd dl)::dates_in_month(tl dl, m)
  else dates_in_month(tl dl, m)
#+END_SRC

** dates_in_months
#+BEGIN_SRC sml
fun dates_in_months(dl : (int * int * int) list, ml : int list) =
  if null ml
  then []
  else [dates_in_month(dl, hd ml)] @ dates_in_months(dl, tl ml)

#+END_SRC

** get_nth
#+BEGIN_SRC sml
fun get_nth (sl : string list , nth : int) =
  (* 题目里的说明是不用担心sl太短，这样的话，函数就可以变得很简洁了*)
  if nth = 1
  then hd sl
  else get_nth(tl sl, nth - 1)
#+END_SRC

** date_to_string
#+BEGIN_SRC sml
fun date_to_string (date : (int * int * int)) =
  let val ml = ["January", "February", "March",
	  "April", "May", "June", "July",
	  "August", "September", "October",
	  "November", "December"]
  in
     get_nth(ml, (#2 date)) ^ " " ^Int.toString((#3 date)) ^ ", " ^ Int.toString((#1 date))
  end
#+END_SRC

** number_before_reaching_sum
#+BEGIN_SRC sml
fun number_before_reaching_sum (sum : int, il : int list) =
  (* 这玩意挺爽的一点是，里面可以做辅助函数 *)
  let
      fun helper (il : int list, sum_of_n_items : int, n_item : int) = (* sum_of_n_items是前面的n项的和，n_item是第n项*)
	if sum_of_n_items >= sum
	then n_item
	else helper(tl il, sum_of_n_items + hd il, n_item + 1)
  in
      helper(il, 0, 0)
  end
#+END_SRC

** what_month
#+BEGIN_SRC sml
fun what_month (day : int) =
  (* 这是一个简化版的程序，忽略了闰年 *)
  let
      val day_of_each_month = [31, 28, 31, 30,
			       31, 30, 31, 31,
			       30, 31, 30, 31] (* 每个月的天数 *)
      fun count_days (rest_days : int, day_of_each_month : int list, nth : int) =
	if rest_days <=  hd day_of_each_month
	then nth
	else count_days(rest_days - hd day_of_each_month, tl day_of_each_month, nth + 1)
  in
      count_days(day, day_of_each_month, 1)
  end

#+END_SRC

** month_range
#+BEGIN_SRC sml
fun month_range (day1 : int, day2 : int) =
  if day1 > day2
  then []
  else if day1 = day2
  then [what_month(day2)]
  else what_month(day1)::month_range(day1 + 1, day2)
#+END_SRC

** oldest
#+BEGIN_SRC sml
fun oldest (dl : (int * int * int) list) =
  if null dl
  then NONE
  else let
      fun oldest_date(dl : (int * int * int) list) =
	if null (tl dl)
	then hd dl
	else let val dl_ans = oldest_date(tl dl)
	     in
		 if is_older(dl_ans, hd dl)
		 then hd dl
		 else dl_ans
	     end
  in
      SOME(oldest_date(dl))
  end


#+END_SRC
